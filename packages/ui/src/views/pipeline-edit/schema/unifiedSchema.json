{
  "$ref": "#/definitions/Schema",
  "$schema": "http://json-schema.org/draft-07/schema#",
  "definitions": {
    "Action": {
      "anyOf": [
        {
          "$ref": "#/definitions/ActionType"
        },
        {
          "$ref": "#/definitions/ActionLong"
        }
      ]
    },
    "ActionLong": {
      "properties": {
        "abort": {
          "type": "boolean"
        },
        "fail": {
          "type": "boolean"
        },
        "ignore": {
          "type": "boolean"
        },
        "manual-intervention": {
          "$ref": "#/definitions/ActionManual"
        },
        "pipeline-rollback": {
          "type": "boolean"
        },
        "retry": {
          "$ref": "#/definitions/ActionRetry"
        },
        "retry-step-group": {
          "type": "boolean"
        },
        "stage-rollback": {
          "type": "boolean"
        },
        "success": {
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "ActionManual": {
      "properties": {
        "timeout": {
          "type": "string"
        },
        "timeout-action": {
          "$ref": "#/definitions/Action"
        }
      },
      "type": "object",
      "x-go-file": "action_manual.go"
    },
    "ActionRetry": {
      "properties": {
        "attempts": {
          "type": "number"
        },
        "failure-action": {
          "$ref": "#/definitions/Action"
        },
        "interval": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          ]
        }
      },
      "type": "object",
      "x-go-file": "action_retry.go"
    },
    "ActionType": {
      "enum": [
        "abort",
        "fail",
        "ignore",
        "manual-intervention",
        "pipeline-rollback",
        "retry",
        "retry-step-group",
        "stage-rollback",
        "success"
      ],
      "type": "string"
    },
    "Cache": {
      "description": "Cache defines pipeline caching behavior.",
      "properties": {
        "disabled": {
          "description": "Disabled disables cache intelligence.",
          "type": "boolean"
        },
        "key": {
          "description": "Key provides a caching key.",
          "type": "string"
        },
        "path": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          ],
          "description": "Paths provides one or more paths to cache."
        },
        "policy": {
          "description": "Policy configures the pull and push behavior of the cache. By default, the stage pulls the cache when the stage starts and pushes changes to the cache when the stage ends.",
          "enum": ["pull", "pull-push", "push"],
          "type": "string"
        }
      },
      "type": "object",
      "x-go-file": "cache.go"
    },
    "Clone": {
      "anyOf": [
        {
          "type": "boolean"
        },
        {
          "$ref": "#/definitions/CloneLong"
        }
      ]
    },
    "CloneLong": {
      "properties": {
        "depth": {
          "description": "Depth defines the clone depth.",
          "type": "number"
        },
        "disabled": {
          "description": "Disabled disables the default clone step.",
          "type": "boolean"
        },
        "insecure": {
          "description": "Insecure enables cloning without ssl verification.",
          "type": "boolean"
        },
        "lfs": {
          "description": "Lfs enables cloning lfs files.",
          "type": "boolean"
        },
        "ref": {
          "$ref": "#/definitions/CloneRef",
          "description": "Reference defines the clone ref."
        },
        "strategy": {
          "description": "Strategy configures the clone strategy.",
          "enum": ["source-branch", "merge"],
          "type": "string"
        },
        "submodules": {
          "description": "Submodules enables cloning all submodules;",
          "type": "boolean"
        },
        "tags": {
          "description": "Tags enables cloning all tags;",
          "type": "boolean"
        },
        "trace": {
          "description": "Trace enables trace logging.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "CloneRef": {
      "anyOf": [
        {
          "type": "string"
        },
        {
          "$ref": "#/definitions/CloneRefLong"
        }
      ]
    },
    "CloneRefLong": {
      "properties": {
        "name": {
          "description": "Name provides the ref name. This can be the branch or tag name. Or this can be the full reference, e.g. refs/heads/main.",
          "type": "string"
        },
        "sha": {
          "description": "Sha provides the commit sha.",
          "type": "string"
        },
        "type": {
          "description": "Type provides the ref type. If undefined, the reference name is used to determine the reference type.",
          "enum": ["branch", "pull-request", "tag"],
          "type": "string"
        }
      },
      "type": "object"
    },
    "Concurrency": {
      "anyOf": [
        {
          "type": "string"
        },
        {
          "$ref": "#/definitions/ConcurrencyLong"
        }
      ],
      "description": "Concurrency groups provide a way to limit concurrency execution of pipelines that share the same concurrency key."
    },
    "ConcurrencyLong": {
      "properties": {
        "cancel-in-progress": {
          "description": "Cancel any in-progress pipelines or stages that are in-progress when a new pipeline or stage is received.",
          "type": "boolean"
        },
        "group": {
          "description": "Group provides the key used to group pipelines or stages together into a concurrency group.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "Container": {
      "anyOf": [
        {
          "type": "string"
        },
        {
          "$ref": "#/definitions/ContainerLong"
        }
      ]
    },
    "ContainerLong": {
      "description": "ContainerLong defines the container configuration syntax in long form.",
      "properties": {
        "args": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          ]
        },
        "connector": {
          "description": "Connector provides the Connect used to authenticate to the registry.",
          "type": "string"
        },
        "cpu": {
          "type": ["string", "number"]
        },
        "credentials": {
          "$ref": "#/definitions/Credentials",
          "description": "Credentials provides the registry authentication credentials."
        },
        "dns": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          ]
        },
        "entrypoint": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          ]
        },
        "env": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Env provides the container environment variables.",
          "type": "object"
        },
        "extra-hosts": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          ]
        },
        "group": {
          "type": ["string", "number"]
        },
        "image": {
          "description": "Image defines the container image.",
          "type": "string"
        },
        "memory": {
          "type": ["string", "number"]
        },
        "network": {
          "type": "string"
        },
        "network-mode": {
          "type": "string"
        },
        "ports": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "privileged": {
          "type": "boolean"
        },
        "pull": {
          "enum": ["always", "never", "if-not-exists"],
          "type": "string"
        },
        "shm-size": {
          "type": ["string", "number"]
        },
        "user": {
          "type": ["string", "number"]
        },
        "volumes": {
          "items": {
            "$ref": "#/definitions/Mount"
          },
          "type": "array"
        },
        "workdir": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "Credentials": {
      "properties": {
        "aws": {
          "$ref": "#/definitions/CredentialsAWS",
          "description": "AWS defines registry credentials for amazon web services."
        },
        "password": {
          "description": "Password provides the registry password.",
          "type": "string"
        },
        "username": {
          "description": "Username provides the registry username.",
          "type": "string"
        }
      },
      "type": "object",
      "x-go-file": "credentials.go"
    },
    "CredentialsAWS": {
      "properties": {
        "access-key": {
          "description": "AccessKey provides the aws access key id.",
          "type": "string"
        },
        "secret-key": {
          "description": "SecretKey provides the aws access key secret.",
          "type": "string"
        }
      },
      "type": "object",
      "x-go-file": "credentials_aws.go"
    },
    "Environment": {
      "anyOf": [
        {
          "type": "string"
        },
        {
          "$ref": "#/definitions/EnvironmentLong"
        }
      ]
    },
    "EnvironmentItem": {
      "properties": {
        "deploy-to": {
          "anyOf": [
            {
              "const": "all",
              "type": "string"
            },
            {
              "type": "string"
            },
            {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          ],
          "description": "DeployToAll deploys to all infrastructure definitions (clusters) associated with the environment."
        },
        "name": {
          "description": "Name provides the environment name.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "EnvironmentLong": {
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/EnvironmentItem"
          },
          "type": "array"
        },
        "parallel": {
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "EnvironmentSchema": {
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "org": {
          "deprecated": true,
          "type": "string"
        },
        "project": {
          "deprecated": true,
          "type": "string"
        },
        "tags": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        },
        "type": {
          "enum": ["production", "non-production"],
          "type": "string"
        }
      },
      "type": "object",
      "x-go-file": "schema_environment.go"
    },
    "Event": {
      "anyOf": [
        {
          "$ref": "#/definitions/EventType"
        },
        {
          "$ref": "#/definitions/EventLong"
        }
      ]
    },
    "EventFilter": {
      "properties": {
        "types": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          ]
        }
      },
      "type": "object"
    },
    "EventLong": {
      "properties": {
        "branch_protection_rule": {
          "$ref": "#/definitions/EventFilter"
        },
        "check_run": {
          "$ref": "#/definitions/EventFilter"
        },
        "check_suite": {
          "$ref": "#/definitions/EventFilter"
        },
        "create": {},
        "delete": {},
        "deployment": {},
        "deployment_status": {},
        "discussion": {
          "$ref": "#/definitions/EventFilter"
        },
        "discussion_comment": {
          "$ref": "#/definitions/EventFilter"
        },
        "fork": {},
        "issue_comment": {
          "$ref": "#/definitions/EventFilter"
        },
        "issues": {
          "$ref": "#/definitions/EventFilter"
        },
        "label": {
          "$ref": "#/definitions/EventFilter"
        },
        "member": {
          "$ref": "#/definitions/EventFilter"
        },
        "merge_group": {
          "$ref": "#/definitions/EventFilter"
        },
        "milestone": {
          "$ref": "#/definitions/EventFilter"
        },
        "page_build": {},
        "project": {
          "$ref": "#/definitions/EventFilter"
        },
        "project_card": {
          "$ref": "#/definitions/EventFilter"
        },
        "project_column": {
          "$ref": "#/definitions/EventFilter"
        },
        "public": {},
        "pull_request": {
          "$ref": "#/definitions/PullRequestFilter"
        },
        "pull_request_review": {
          "$ref": "#/definitions/Event"
        },
        "pull_request_review_comment": {
          "$ref": "#/definitions/Event"
        },
        "pull_request_target": {
          "$ref": "#/definitions/PullRequestFilter"
        },
        "push": {
          "$ref": "#/definitions/PushFilter"
        },
        "registry_package": {
          "$ref": "#/definitions/EventFilter"
        },
        "release": {
          "$ref": "#/definitions/EventFilter"
        },
        "repository_dispatch": {
          "$ref": "#/definitions/EventFilter"
        },
        "schedule": {},
        "status": {},
        "watch": {
          "$ref": "#/definitions/EventFilter"
        },
        "workflow_call": {},
        "workflow_dispatch": {},
        "workflow_run": {}
      },
      "type": "object"
    },
    "EventType": {
      "enum": [
        "branch_protection_rule",
        "check_run",
        "check_suite",
        "create",
        "delete",
        "deployment",
        "deployment_status",
        "discussion",
        "discussion_comment",
        "fork",
        "issue_comment",
        "issues",
        "label",
        "member",
        "merge_group",
        "milestone",
        "page_build",
        "project",
        "project_card",
        "project_column",
        "public",
        "pull_request",
        "pull_request_review",
        "pull_request_review_comment",
        "pull_request_target",
        "push",
        "registry_package",
        "repository_dispatch",
        "release",
        "schedule",
        "status",
        "watch",
        "workflow_call",
        "workflow_dispatch",
        "workflow_run"
      ],
      "type": "string"
    },
    "FailureStrategy": {
      "properties": {
        "action": {
          "$ref": "#/definitions/Action"
        },
        "errors": {
          "anyOf": [
            {
              "$ref": "#/definitions/FailureType"
            },
            {
              "items": {
                "$ref": "#/definitions/FailureType"
              },
              "type": "array"
            }
          ]
        }
      },
      "type": "object"
    },
    "FailureType": {
      "enum": [
        "all",
        "approval-rejection",
        "authentication",
        "authorization",
        "connectivity",
        "delegate-provisioning",
        "delegate-restart",
        "input-timeout",
        "policy-evaluation",
        "timeout",
        "unknown",
        "verification",
        "user-mark-fail"
      ],
      "type": "string"
    },
    "For": {
      "description": "For defines a for loop execution strategy.",
      "properties": {
        "iterations": {
          "description": "Iterations defines maximum number of interations.",
          "type": "number"
        }
      },
      "type": "object",
      "x-go-file": "strategy_for.go"
    },
    "InfraSchema": {
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "org": {
          "deprecated": true,
          "type": "string"
        },
        "project": {
          "deprecated": true,
          "type": "string"
        },
        "tags": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        }
      },
      "type": "object",
      "x-go-file": "schema_infra.go"
    },
    "Input": {
      "properties": {
        "default": {},
        "description": {
          "description": "Description defines the input description.",
          "type": "string"
        },
        "enum": {
          "description": "Enum defines a list of accepted input values.",
          "items": {},
          "type": "array"
        },
        "items": {
          "description": "Items defines an array type.",
          "items": {},
          "type": "array"
        },
        "mask": {
          "deprecated": true,
          "description": "Mask indicates the input should be masked.",
          "type": "boolean"
        },
        "options": {
          "description": "Options defines a list of accepted input values. This is an alias for enum.",
          "items": {},
          "type": "array"
        },
        "required": {
          "description": "Required indicates the input is required.",
          "type": "boolean"
        },
        "type": {
          "description": "Type defines the input type.",
          "enum": ["string", "number", "boolean", "array", "duration", "choice", "environment", "secret"],
          "type": "string"
        }
      },
      "required": ["type"],
      "type": "object",
      "x-go-file": "input.go"
    },
    "MachineImage": {
      "enum": ["ubuntu-latest", "macos-latest", "wndows-latest"],
      "type": "string"
    },
    "MachineSize": {
      "enum": ["flex", "small", "medium", "large", "xlarge", "xxlarge"],
      "type": "string"
    },
    "Matrix": {
      "description": "Matrix defines a matrix execution strategy.",
      "properties": {
        "exclude": {
          "items": {
            "type": "object"
          },
          "type": "array"
        },
        "include": {
          "items": {
            "type": "object"
          },
          "type": "array"
        }
      },
      "type": "object",
      "x-go-file": "strategy_matrix.go"
    },
    "Mount": {
      "anyOf": [
        {
          "type": "string"
        },
        {
          "$ref": "#/definitions/MountLong"
        }
      ]
    },
    "MountLong": {
      "properties": {
        "source": {
          "type": "string"
        },
        "target": {
          "type": "string"
        }
      },
      "required": ["source", "target"],
      "type": "object"
    },
    "On": {
      "anyOf": [
        {
          "$ref": "#/definitions/EventType"
        },
        {
          "items": {
            "$ref": "#/definitions/Event"
          },
          "type": "array"
        },
        {
          "$ref": "#/definitions/Event"
        }
      ]
    },
    "Output": {
      "anyOf": [
        {
          "type": "string"
        },
        {
          "$ref": "#/definitions/OutputLong"
        }
      ]
    },
    "OutputLong": {
      "properties": {
        "alias": {
          "type": "string"
        },
        "mask": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        },
        "scope": {
          "enum": ["pipeline", "stage"],
          "type": "string"
        }
      },
      "type": "object"
    },
    "Permissions": {
      "anyOf": [
        {
          "const": "write-all",
          "type": "string"
        },
        {
          "const": "read-all",
          "type": "string"
        },
        {
          "$ref": "#/definitions/PermissionsLong"
        }
      ],
      "description": "Permissions defines the permission granted to the token injected into the pipeline environment."
    },
    "PermissionsLong": {
      "properties": {
        "actions": {
          "enum": ["read", "write", "none"],
          "type": "string"
        },
        "checks": {
          "enum": ["read", "write", "none"],
          "type": "string"
        },
        "contents": {
          "enum": ["read", "write", "none"],
          "type": "string"
        },
        "deployments": {
          "enum": ["read", "write", "none"],
          "type": "string"
        },
        "discussions": {
          "enum": ["read", "write", "none"],
          "type": "string"
        },
        "id-token": {
          "enum": ["read", "write", "none"],
          "type": "string"
        },
        "issues": {
          "enum": ["read", "write", "none"],
          "type": "string"
        },
        "packages": {
          "enum": ["read", "write", "none"],
          "type": "string"
        },
        "pages": {
          "enum": ["read", "write", "none"],
          "type": "string"
        },
        "pull-requests": {
          "enum": ["read", "write", "none"],
          "type": "string"
        },
        "repository-projects": {
          "enum": ["read", "write", "none"],
          "type": "string"
        },
        "security-events": {
          "enum": ["read", "write", "none"],
          "type": "string"
        },
        "statuses": {
          "enum": ["read", "write", "none"],
          "type": "string"
        }
      },
      "type": "object"
    },
    "Pipeline": {
      "properties": {
        "barriers": {
          "description": "Barriers provides optional pipeline barriers.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "clone": {
          "$ref": "#/definitions/Clone",
          "description": "Clone overrides the default clone behavior."
        },
        "concurrency": {
          "$ref": "#/definitions/Concurrency",
          "description": "Concurrency groups provide a way to limit concurrency execution of pipelines that share the same concurrency key."
        },
        "default": {},
        "env": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Env provides global environment variables that propagate to all pipeline steps.",
          "type": "object"
        },
        "environment": {
          "$ref": "#/definitions/Environment",
          "description": "Environment defines the target deployment environment (e.g. development, prod)."
        },
        "id": {
          "deprecated": true,
          "description": "Id provides a unique pipeline identifer.",
          "type": "string"
        },
        "if": {
          "description": "If provides conditional pipeline execution logic. If the condition resolves to false, the pipeline is skipped.",
          "type": "string"
        },
        "inputs": {
          "additionalProperties": {
            "$ref": "#/definitions/Input"
          },
          "description": "Inputs provides pipeline input variables.",
          "type": "object"
        },
        "jobs": {
          "additionalProperties": {
            "$ref": "#/definitions/Stage"
          },
          "description": "Jobs defines jobs (stages) in the pipeline.\n\nThis property is available solely for the purpose of backward compatibility with GitHub Actions.",
          "type": "object"
        },
        "name": {
          "deprecated": true,
          "description": "Name provides a pipeline name.",
          "type": "string"
        },
        "on": {
          "$ref": "#/definitions/On",
          "description": "On provides condition pipeline execution logic based on trigger event and action mapping. If the conditional logic resolves to folse, the pipeline is skipped."
        },
        "permissions": {
          "$ref": "#/definitions/Permissions"
        },
        "repo": {
          "$ref": "#/definitions/Repository",
          "description": "Repo overrides the default repository."
        },
        "service": {
          "$ref": "#/definitions/Service",
          "description": "Service defines the service being deployed."
        },
        "stages": {
          "description": "Stages provides a list of stages. Each pipeline is made up of one or more stages that executes sequentially.",
          "items": {
            "$ref": "#/definitions/Stage"
          },
          "type": "array"
        },
        "status": {
          "$ref": "#/definitions/Status",
          "description": "Status overrides the default status behavior."
        }
      },
      "type": "object",
      "x-go-file": "pipeline.go"
    },
    "Platform": {
      "description": "Platform defines the target execution environment.",
      "properties": {
        "arch": {
          "description": "OS defines the target operating system.",
          "type": "string"
        },
        "features": {
          "description": "Features defines the target platform features. Not currently used.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "os": {
          "description": "Arch defines the target cpu architecture.",
          "type": "string"
        },
        "variant": {
          "description": "Variant defines the target cpu architecture variant. Not currently used.",
          "type": "string"
        },
        "version": {
          "description": "Version defines the target operating system version. Not currently used.",
          "type": "string"
        }
      },
      "type": "object",
      "x-go-file": "platform.go"
    },
    "PullRequestFilter": {
      "properties": {
        "branches": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          ]
        },
        "branches-ignore": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          ]
        },
        "paths": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          ]
        },
        "paths-ignore": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          ]
        },
        "review-approved": {
          "type": "boolean"
        },
        "review-dismissed": {
          "type": "boolean"
        },
        "tags": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          ]
        },
        "tags-ignore": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          ]
        },
        "types": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          ]
        }
      },
      "type": "object"
    },
    "PushFilter": {
      "properties": {
        "branches": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          ]
        },
        "branches-ignore": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          ]
        },
        "paths": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          ]
        },
        "paths-ignore": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          ]
        },
        "tags": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          ]
        },
        "tags-ignore": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          ]
        }
      },
      "type": "object"
    },
    "Report": {
      "properties": {
        "path": {
          "type": "string"
        },
        "type": {
          "enum": ["junit", "xunit", "nunit"],
          "type": "string"
        }
      },
      "type": "object",
      "x-go-file": "report.go"
    },
    "Repository": {
      "description": "Repository defines a remote git repository.",
      "properties": {
        "connector": {
          "description": "Connector provides the repository connector.",
          "type": "string"
        },
        "name": {
          "description": "Name provides the repository name.",
          "type": "string"
        }
      },
      "type": "object",
      "x-go-file": "repository.go"
    },
    "Runtime": {
      "anyOf": [
        {
          "$ref": "#/definitions/RuntimeShort"
        },
        {
          "$ref": "#/definitions/RuntimeLong"
        }
      ]
    },
    "RuntimeCloud": {
      "description": "RuntimeClone configures the cloud runtime environment.",
      "properties": {
        "image": {
          "anyOf": [
            {
              "$ref": "#/definitions/MachineImage"
            },
            {
              "type": "string"
            }
          ]
        },
        "size": {
          "$ref": "#/definitions/MachineSize"
        }
      },
      "type": "object"
    },
    "RuntimeInstance": {
      "anyOf": [
        {
          "type": "string"
        },
        {
          "$ref": "#/definitions/RuntimeInstanceLong"
        }
      ]
    },
    "RuntimeInstanceLong": {
      "description": "RuntimeInstanceLong configures the vm runtime environment.",
      "properties": {
        "image": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "RuntimeKubernetes": {
      "description": "RuntimeKubernetes configures the kubernetes runtime environment.",
      "properties": {
        "namespace": {
          "type": "string"
        }
      },
      "type": "object",
      "x-go-file": "runtime_kubernetes.go"
    },
    "RuntimeLong": {
      "description": "RuntimeLong configures the runtime environment.",
      "properties": {
        "cloud": {
          "$ref": "#/definitions/RuntimeCloud"
        },
        "kubernetes": {
          "$ref": "#/definitions/RuntimeKubernetes"
        },
        "shell": {
          "type": "boolean"
        },
        "vm": {
          "$ref": "#/definitions/RuntimeInstance"
        }
      },
      "type": "object"
    },
    "RuntimeShort": {
      "enum": ["cloud", "vm", "kubernetes", "shell"],
      "type": "string"
    },
    "Schema": {
      "properties": {
        "action": {
          "$ref": "#/definitions/Template",
          "deprecated": "use \"template\" instead",
          "description": "Action defines re-usable pipeline steps and stages."
        },
        "concurrency": {
          "$ref": "#/definitions/Concurrency",
          "description": "Concurrency groups provide a way to limit concurrency execution of pipelines that share the same concurrency key."
        },
        "defaults": {
          "description": "Defaults provides default settings that apply to all jobs in the workflow.\n\nThis property is available solely for the purpose of backward compatibility with GitHub Actions.",
          "type": "object"
        },
        "env": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Envs defines environment variables that are available to all steps in the workflow.\n\nThis property is available solely for the purpose of backward compatibility with GitHub Actions.",
          "type": "object"
        },
        "environment": {
          "$ref": "#/definitions/EnvironmentSchema",
          "description": "Environment defines a deployment environment."
        },
        "infrastructure": {
          "$ref": "#/definitions/InfraSchema",
          "description": "Infrastructure defines the service infrastructure."
        },
        "inputset": {
          "description": "Inputset defines re-usable inputs."
        },
        "jobs": {
          "additionalProperties": {
            "$ref": "#/definitions/Stage"
          },
          "description": "Jobs defines the parallel workflow jobs.\n\nThis property is available solely for the purpose of backward compatibility with GitHub Actions.",
          "type": "object"
        },
        "name": {
          "description": "Name defines the pipeline name.\n\nThis property is available solely for the purpose of backward compatibility with GitHub Actions.",
          "type": "string"
        },
        "on": {
          "$ref": "#/definitions/On",
          "description": "On defines the workflow triggers.\n\nThis property is available solely for the purpose of backward compatibility with GitHub Actions."
        },
        "permissions": {
          "$ref": "#/definitions/Permissions",
          "description": "Permissions defines the permission granted to the token injected into the pipeline environment."
        },
        "pipeline": {
          "$ref": "#/definitions/Pipeline",
          "description": "Pipeline defines the pipeline configuration."
        },
        "service": {
          "$ref": "#/definitions/ServiceSchema",
          "description": "Service defines a service."
        },
        "template": {
          "$ref": "#/definitions/Template",
          "description": "Template defines re-usable pipeline steps and stages."
        },
        "version": {
          "description": "Version defines the schema version.",
          "type": ["string", "number"]
        }
      },
      "type": "object",
      "x-go-file": "schema.go"
    },
    "Service": {
      "anyOf": [
        {
          "type": "string"
        },
        {
          "$ref": "#/definitions/ServiceLong"
        }
      ]
    },
    "ServiceLong": {
      "properties": {
        "items": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "parallel": {
          "type": "boolean"
        }
      },
      "required": ["items"],
      "type": "object"
    },
    "ServiceSchema": {
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "org": {
          "deprecated": true,
          "type": "string"
        },
        "project": {
          "deprecated": true,
          "type": "string"
        },
        "tags": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        }
      },
      "type": "object",
      "x-go-file": "schema_service.go"
    },
    "Stage": {
      "properties": {
        "approval": {
          "$ref": "#/definitions/StageApproval",
          "description": "Approval defines an approval stage."
        },
        "cache": {
          "$ref": "#/definitions/Cache",
          "description": "Cache defines the cache configuration."
        },
        "clone": {
          "$ref": "#/definitions/Clone",
          "description": "Clone overrides the default clone settings."
        },
        "concurrency": {
          "$ref": "#/definitions/Concurrency",
          "description": "Concurrency groups provide a way to limit concurrency execution of pipelines that share the same concurrency key."
        },
        "delegate": {
          "description": "Delegage defines the delegate that should handle stage execution. This is optional.",
          "type": "string"
        },
        "env": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Env defines the environment of the stage. These environment variables are shared by all steps in the stage.",
          "type": "object"
        },
        "environment": {
          "$ref": "#/definitions/Environment",
          "description": "Environment defines the deployment environment (production, staging)."
        },
        "group": {
          "$ref": "#/definitions/StageGroup",
          "description": "Group defines a group of stages."
        },
        "id": {
          "description": "Id defines the pipeline id.",
          "type": "string"
        },
        "if": {
          "description": "If defines conditional execution logic.",
          "type": "string"
        },
        "name": {
          "description": "Name defines the pipeline name.",
          "type": "string"
        },
        "needs": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          ],
          "description": "Needs defines stages that must be completed before this stage can run."
        },
        "on-failure": {
          "$ref": "#/definitions/FailureStrategy"
        },
        "outputs": {
          "description": "Outputs configures the stage to export variables for use by other stages.",
          "type": "object"
        },
        "parallel": {
          "$ref": "#/definitions/StageGroup",
          "description": "Parallel defines a set of parallel stages."
        },
        "permissions": {
          "$ref": "#/definitions/Permissions",
          "description": "Permissions defines the permission granted to the token injected into the stage environment."
        },
        "platform": {
          "$ref": "#/definitions/Platform",
          "description": "Platform defines the target platform."
        },
        "rollback": {
          "$ref": "#/definitions/Step",
          "description": "Rollback defines the rollback steps."
        },
        "runs-on": {
          "description": "RunsOn defines the type of machine to run the job.\n\nThis property is available solely for the purpose of backward compatibility with GitHub Actions.",
          "type": "string"
        },
        "runtime": {
          "$ref": "#/definitions/Runtime",
          "description": "Runtime defines the execution runtime."
        },
        "service": {
          "$ref": "#/definitions/Service",
          "description": "Service defines the deployment target."
        },
        "services": {
          "additionalProperties": {
            "$ref": "#/definitions/Container"
          },
          "description": "Services defines background service containers.\n\nThis property is available solely for the purpose of backward compatibility with GitHub Actions.",
          "type": "object"
        },
        "status": {
          "$ref": "#/definitions/Status",
          "description": "Status overrides the default status settings."
        },
        "steps": {
          "description": "Steps defines a list of steps.",
          "items": {
            "$ref": "#/definitions/Step"
          },
          "type": "array"
        },
        "strategy": {
          "$ref": "#/definitions/Strategy",
          "description": "Strategy defines the matrix or looping strategy."
        },
        "template": {
          "$ref": "#/definitions/StageTemplate",
          "description": "Template defines a stage template."
        },
        "volumes": {
          "items": {
            "$ref": "#/definitions/Volume"
          },
          "type": "array"
        },
        "workspace": {
          "$ref": "#/definitions/Workspace",
          "description": "Workspace configures the local workspace directory."
        }
      },
      "type": "object",
      "x-go-file": "stage.go"
    },
    "StageApproval": {
      "properties": {
        "uses": {
          "type": "string"
        },
        "with": {
          "type": "object"
        }
      },
      "type": "object",
      "x-go-file": "stage_approval.go"
    },
    "StageGroup": {
      "properties": {
        "parallel": {
          "deprecated": true,
          "description": "Parallel defines the maximum number of stages that can run in parallel. If unset or zero, the stages run sequentially.",
          "type": "number"
        },
        "stages": {
          "description": "Stages defines a list of stages.",
          "items": {
            "$ref": "#/definitions/Stage"
          },
          "type": "array"
        }
      },
      "type": "object",
      "x-go-file": "stage_group.go"
    },
    "StageTemplate": {
      "properties": {
        "uses": {
          "type": "string"
        },
        "with": {
          "type": "object"
        }
      },
      "type": "object",
      "x-go-file": "stage_template.go"
    },
    "Status": {
      "properties": {
        "disabled": {
          "description": "Disabled disables the status check.",
          "type": "boolean"
        },
        "level": {
          "description": "Level stes the status level.",
          "enum": ["pipeline", "stage", "step"],
          "type": "string"
        },
        "matrix": {
          "description": "Matrix defines how matrix statuses are handled.",
          "enum": ["itemize", "aggregate"],
          "type": "string"
        },
        "name": {
          "description": "Name sets the default status name.",
          "type": "string"
        }
      },
      "type": "object",
      "x-go-file": "status.go"
    },
    "Step": {
      "anyOf": [
        {
          "type": "string"
        },
        {
          "$ref": "#/definitions/StepLong"
        }
      ]
    },
    "StepAction": {
      "properties": {
        "env": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Env defines the environment of the step.",
          "type": "object"
        },
        "output": {
          "anyOf": [
            {
              "$ref": "#/definitions/Output"
            },
            {
              "items": {
                "$ref": "#/definitions/Output"
              },
              "type": "array"
            }
          ],
          "deprecated": true,
          "description": "Output defines the output variables."
        },
        "report": {
          "anyOf": [
            {
              "$ref": "#/definitions/Report"
            },
            {
              "items": {
                "$ref": "#/definitions/Report"
              },
              "type": "array"
            }
          ],
          "description": "Report uploads reports at the the provided path(s)"
        },
        "uses": {
          "description": "Uses defines the action.",
          "type": "string"
        },
        "with": {
          "description": "With defines the action configuration parameters.",
          "type": "object"
        }
      },
      "type": "object",
      "x-go-file": "step_action.go"
    },
    "StepApproval": {
      "properties": {
        "env": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        },
        "uses": {
          "type": "string"
        },
        "with": {
          "type": "object"
        }
      },
      "type": "object",
      "x-go-file": "step_approval.go"
    },
    "StepBarrier": {
      "properties": {
        "name": {
          "type": "string"
        }
      },
      "required": ["name"],
      "type": "object",
      "x-go-file": "step_barrier.go"
    },
    "StepGroup": {
      "properties": {
        "parallel": {
          "deprecated": true,
          "description": "Parallel defines the maximum number of steps that can run in parallel. If unset or zero, the steps run sequentially.",
          "type": ["number", "boolean"]
        },
        "steps": {
          "description": "Steps defines a list of steps.",
          "items": {
            "$ref": "#/definitions/Step"
          },
          "type": "array"
        }
      },
      "type": "object",
      "x-go-file": "step_group.go"
    },
    "StepLong": {
      "properties": {
        "action": {
          "$ref": "#/definitions/StepAction",
          "description": "Action defines an action step."
        },
        "approval": {
          "$ref": "#/definitions/StepApproval",
          "description": "Approval defines an approval step."
        },
        "background": {
          "$ref": "#/definitions/StepRun",
          "description": "Background defines a background step."
        },
        "barrier": {
          "$ref": "#/definitions/StepBarrier",
          "description": "Barrier defines a step barrier."
        },
        "env": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Env defines the environment of the step.\n\nThis property is available solely for the purpose of backward compatibility with GitHub Actions.",
          "type": "object"
        },
        "group": {
          "$ref": "#/definitions/StepGroup",
          "description": "Group defines a step group."
        },
        "id": {
          "description": "Id defines the step id.",
          "type": "string"
        },
        "if": {
          "description": "If defines conditional execution logic.",
          "type": "string"
        },
        "name": {
          "description": "Name defines the step name.",
          "type": "string"
        },
        "needs": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          ],
          "description": "Needs defines steps that must be completed before this step can run."
        },
        "on-failure": {
          "$ref": "#/definitions/FailureStrategy",
          "description": "FailureStrategy defines error handling."
        },
        "parallel": {
          "$ref": "#/definitions/StepGroup",
          "description": "Parallel defines a parallel step group."
        },
        "queue": {
          "$ref": "#/definitions/StepQueue",
          "description": "Queue defines a queue step."
        },
        "run": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "$ref": "#/definitions/StepRun"
            }
          ],
          "description": "Run defines a run step."
        },
        "run-test": {
          "$ref": "#/definitions/StepTest",
          "description": "Test defines a run test step"
        },
        "status": {
          "$ref": "#/definitions/Status",
          "description": "Status overrides the default status settings."
        },
        "strategy": {
          "$ref": "#/definitions/Strategy",
          "description": "Strategy defines the matrix or looping strategy."
        },
        "template": {
          "$ref": "#/definitions/StepTemplate",
          "description": "Template defines a step template."
        },
        "timeout": {
          "description": "Timeout defines the step timeout duration.",
          "type": ["string", "number"]
        },
        "uses": {
          "description": "Uses defines the github action.\n\nThis property is available solely for the purpose of backward compatibility with GitHub Actions.",
          "type": "string"
        },
        "with": {
          "description": "With defines the github action configuration parameters.\n\nThis property is available solely for the purpose of backward compatibility with GitHub Actions.",
          "type": "object"
        }
      },
      "type": "object"
    },
    "StepQueue": {
      "properties": {
        "key": {
          "type": "string"
        },
        "scope": {
          "enum": ["pipeline", "stage"],
          "type": "string"
        }
      },
      "required": ["key"],
      "type": "object",
      "x-go-file": "step_queue.go"
    },
    "StepRun": {
      "properties": {
        "container": {
          "$ref": "#/definitions/Container",
          "description": "Container runs the step inside a container. If you do not set a container, the step will run directly on the host unless the target runtime in kubernetes, in which case the container is required."
        },
        "delegate": {
          "anyOf": [
            {
              "const": "inherit-from-infrastrcuture",
              "type": "string"
            },
            {
              "type": "string"
            },
            {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          ],
          "description": "This property is available solely for the purpose of backward compatibility with Harness Currrent Gen."
        },
        "env": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Env defines the environment of the step.",
          "type": "object"
        },
        "output": {
          "anyOf": [
            {
              "$ref": "#/definitions/Output"
            },
            {
              "items": {
                "$ref": "#/definitions/Output"
              },
              "type": "array"
            }
          ],
          "deprecated": true,
          "description": "Output defines the step output variables."
        },
        "report": {
          "anyOf": [
            {
              "$ref": "#/definitions/Report"
            },
            {
              "items": {
                "$ref": "#/definitions/Report"
              },
              "type": "array"
            }
          ],
          "description": "Report uploads reports at the the provided path(s)"
        },
        "script": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          ],
          "description": "Script runs command line scripts using the operating system's shell. Each script represents a new process and shell in the runner environment. Note that when you provide multi-line commands, each line runs in the same shell."
        },
        "shell": {
          "description": "Shell defines the shell of the step.",
          "enum": ["sh", "bash", "powershell", "pwsh", "python"],
          "type": "string"
        }
      },
      "type": "object",
      "x-go-file": "step_run.go"
    },
    "StepTemplate": {
      "properties": {
        "env": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Env defines the environment of the step.",
          "type": "object"
        },
        "uses": {
          "description": "Uses defines the template.",
          "type": "string"
        },
        "with": {
          "description": "With defines the template configuration parameters.",
          "type": "object"
        }
      },
      "type": "object",
      "x-go-file": "step_template.go"
    },
    "StepTest": {
      "properties": {
        "container": {
          "$ref": "#/definitions/Container",
          "description": "Container runs the step inside a container. If you do not set a container, the step will run directly on the host unless the target runtime in kubernetes, in which case the container is required."
        },
        "env": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Env defines the environment of the step.",
          "type": "object"
        },
        "intelligence": {
          "$ref": "#/definitions/TestIntelligence",
          "description": "Intelligence configures the test intelligence behavior."
        },
        "match": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          ],
          "description": "Match provides unit test matching logic in glob format."
        },
        "output": {
          "anyOf": [
            {
              "$ref": "#/definitions/Output"
            },
            {
              "items": {
                "$ref": "#/definitions/Output"
              },
              "type": "array"
            }
          ],
          "deprecated": true,
          "description": "Output defines the output variables."
        },
        "report": {
          "anyOf": [
            {
              "$ref": "#/definitions/Report"
            },
            {
              "items": {
                "$ref": "#/definitions/Report"
              },
              "type": "array"
            }
          ],
          "description": "Report uploads reports at the the provided path(s)"
        },
        "script": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          ],
          "description": "Script runs command line scripts using the operating system's shell. Each script represents a new process and shell in the runner environment. Note that when you provide multi-line commands, each line runs in the same shell."
        },
        "shell": {
          "description": "Shell defines the shell of the step.",
          "enum": ["sh", "bash", "powershell", "pwsh", "python"],
          "type": "string"
        },
        "splitting": {
          "$ref": "#/definitions/TestSplitting",
          "description": "Splitting configures the test splitting behavior."
        }
      },
      "type": "object",
      "x-go-file": "step_tester.go"
    },
    "Strategy": {
      "properties": {
        "fail-fast": {
          "description": "FailFast defines the how to handle stage or step failure. If true, all in-progress or pending stages or steps are cancelled if any stage or step in the matrix fails.\n\nThis property is available solely for the purpose of backward compatibility with GitHub Actions.",
          "type": "boolean"
        },
        "for": {
          "$ref": "#/definitions/For",
          "description": "For defines a for loop execution strategy."
        },
        "matrix": {
          "$ref": "#/definitions/Matrix",
          "description": "Matrix defines a matrix execution strategy."
        },
        "max-parallel": {
          "description": "MaxParallel defines the maximum number of parallel stages or steps.\n\nThis property is available solely for the purpose of backward compatibility with GitHub Actions.",
          "type": "number"
        },
        "while": {
          "$ref": "#/definitions/While",
          "description": "While defines a while loop execution strategy."
        }
      },
      "type": "object",
      "x-go-file": "strategy.go"
    },
    "Template": {
      "description": "Template defines a Pipeline, Stage or Step template.",
      "properties": {
        "inputs": {
          "additionalProperties": {
            "$ref": "#/definitions/Input"
          },
          "type": "object"
        },
        "stage": {
          "$ref": "#/definitions/Stage"
        },
        "step": {
          "$ref": "#/definitions/Step"
        }
      },
      "type": "object",
      "x-go-file": "template.go"
    },
    "TestIntelligence": {
      "properties": {
        "disabled": {
          "type": "boolean"
        }
      },
      "type": "object",
      "x-go-file": "test_intelligence.go"
    },
    "TestSplitting": {
      "properties": {
        "concurrency": {
          "type": "number"
        },
        "disabled": {
          "type": "boolean"
        }
      },
      "type": "object",
      "x-go-file": "test_splitting.go"
    },
    "Volume": {
      "properties": {
        "name": {
          "type": "string"
        },
        "uses": {
          "enum": ["bind", "claim", "config", "temp"],
          "type": "string"
        },
        "with": {
          "anyOf": [
            {
              "$ref": "#/definitions/VolumeBind"
            },
            {
              "$ref": "#/definitions/VolumeClaim"
            },
            {
              "$ref": "#/definitions/VolumeConfigMap"
            },
            {
              "$ref": "#/definitions/VolumeTemp"
            }
          ]
        }
      },
      "required": ["name", "uses"],
      "type": "object"
    },
    "VolumeBind": {
      "properties": {
        "path": {
          "type": "string"
        }
      },
      "type": "object",
      "x-go-file": "volume_bind.go"
    },
    "VolumeClaim": {
      "properties": {
        "name": {
          "type": "string"
        }
      },
      "type": "object",
      "x-go-file": "volume_claim.go"
    },
    "VolumeConfigMap": {
      "properties": {
        "mode": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "optional": {
          "type": "boolean"
        }
      },
      "type": "object",
      "x-go-file": "volume_config_map.go"
    },
    "VolumeTemp": {
      "properties": {
        "limit": {
          "type": ["string", "number"]
        },
        "medium": {
          "const": "memory",
          "type": "string"
        }
      },
      "type": "object",
      "x-go-file": "volume_temp.go"
    },
    "While": {
      "description": "While defines a while loop execution strategy.",
      "properties": {
        "condition": {
          "description": "Condition defines the while condition.",
          "type": "string"
        },
        "iterations": {
          "description": "Iterations defines maximum number of interations.",
          "type": "number"
        }
      },
      "type": "object",
      "x-go-file": "strategy_while.go"
    },
    "Workspace": {
      "anyOf": [
        {
          "type": "boolean"
        },
        {
          "$ref": "#/definitions/WorkspaceLong"
        }
      ]
    },
    "WorkspaceLong": {
      "properties": {
        "disabled": {
          "type": "boolean"
        },
        "path": {
          "type": "string"
        }
      },
      "type": "object"
    }
  }
}
